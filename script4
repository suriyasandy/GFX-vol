
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(layout="wide")
st.title("üìä FX Threshold Recalibration & Compliance Impact Dashboard")

# --- Upload section ---
st.sidebar.header("üìÅ Upload Data")
threshold_file = st.sidebar.file_uploader("Upload Threshold CSV", type="csv")
trade_file = st.sidebar.file_uploader("Upload Trade CSV", type="csv")

@st.cache_data
def load_csv(file):
    return pd.read_csv(file)

if threshold_file and trade_file:
    df_threshold = load_csv(threshold_file)
    df_trades = load_csv(trade_file)

    st.success("‚úÖ Files uploaded successfully")

    # Recalibration section
    st.sidebar.header("üîß Recalibrate Thresholds by Group")
    unique_groups = sorted(df_threshold["Group"].unique())
    new_thresholds = {}
    for g in unique_groups:
        default_val = float(df_threshold[df_threshold["Group"] == g]["value"].mean())
        new_thresholds[g] = st.sidebar.number_input(f"Group {g} Threshold", value=default_val, format="%.5f")

    # Apply recalibrated thresholds
    recalibrated_thresholds = pd.DataFrame([
        {"Group": g, "value": new_thresholds[g]} for g in unique_groups
    ])

    df_trades["max_group"] = df_trades[["base_currency_group", "orig_curr_group"]].max(axis=1)
    df_trades["legal_entity"] = df_trades["legal_entity"].astype(str)

    # ‚úÖ Filter out groups not defined in threshold file
    valid_groups = set(recalibrated_thresholds["Group"])
    invalid_groups = set(df_trades["max_group"].unique()) - valid_groups
    if invalid_groups:
        st.warning(f"‚ö†Ô∏è These groups are in trades but missing from threshold input: {sorted(invalid_groups)}. Excluding them.")
        df_trades = df_trades[df_trades["max_group"].isin(valid_groups)]

    unique_entities = df_trades["legal_entity"].unique()
    results = []
    for entity in unique_entities:
        df_entity = df_trades[df_trades["legal_entity"] == entity].copy()
        df_entity = df_entity.merge(recalibrated_thresholds, how="left", left_on="max_group", right_on="Group")
        df_entity["threshold_used"] = df_entity["value"]
        df_entity["is_within_threshold"] = df_entity["deviation_percent"] <= df_entity["threshold_used"]
        results.append(df_entity)

    df_result = pd.concat(results, ignore_index=True)

    st.subheader("üìä Business Overview: Threshold Compliance by Group")
    group_summary = df_result.groupby("max_group").agg(
        Total_Trades=('trade_id', 'count'),
        Breaches=('is_within_threshold', lambda x: (~x).sum()),
        Within_Threshold=('is_within_threshold', 'sum')
    ).reset_index()

    group_summary["Breach %"] = round((group_summary["Breaches"] / group_summary["Total_Trades"]) * 100, 2)
    group_summary["Compliance %"] = round((group_summary["Within_Threshold"] / group_summary["Total_Trades"]) * 100, 2)

    st.dataframe(group_summary)

    # üìä Breach % Bar Chart (Business KPI View)
    st.markdown("### üö¶ Breach % by Group (KPI View)")
    fig_breach = px.bar(group_summary, x='max_group', y='Breach %', text='Breach %',
                        title="Compliance Risk: Breach % per Group",
                        labels={'max_group': 'Volatility Group'},
                        color='Breach %', color_continuous_scale='Reds')
    fig_breach.update_traces(texttemplate='%{text}%', textposition='outside')
    fig_breach.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')
    st.plotly_chart(fig_breach, use_container_width=True)

    # üìà Deviation Distribution Boxplot
    st.markdown("### üìà Deviation Distribution Across Groups")
    fig_box = px.box(df_result, x="max_group", y="deviation_percent", points="outliers",
                     title="Deviation % Spread by Group (Post-Trade Behavior)",
                     labels={"max_group": "Volatility Group", "deviation_percent": "Trade Deviation %"})
    st.plotly_chart(fig_box, use_container_width=True)

    # üì• Download
    st.download_button("üì• Download Full Recalibrated Results CSV",
                       df_result.to_csv(index=False), file_name="fx_recalibrated_results.csv")

else:
    st.warning("Please upload both the threshold and trade files to begin.")

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.model_selection import train_test_split
from hmmlearn.hmm import GaussianHMM
import shap
import plotly.graph_objects as go

@st.cache_data
def generate_mock_fx_data():
    np.random.seed(42)
    date_range = pd.date_range(start='2023-01-01', end='2025-01-01', freq='B')
    currencies = ['EUR', 'GBP', 'JPY', 'INR', 'AUD']
    data = []
    for curr in currencies:
        base = 1 + np.random.rand()
        returns = np.random.normal(0, 0.0015, size=len(date_range))
        prices = base * np.exp(np.cumsum(returns))
        df = pd.DataFrame({'Date': date_range, 'Currency': curr, 'FXRate': prices})
        data.append(df)
    return pd.concat(data)

def compute_log_returns(df):
    df['LogReturn'] = np.log(df['FXRate'] / df['FXRate'].shift(1))
    return df.dropna()

def create_features(df):
    df['Lag1'] = df['LogReturn'].shift(1)
    df['Lag2'] = df['LogReturn'].shift(2)
    df['Lag3'] = df['LogReturn'].shift(3)
    df['MA5'] = df['LogReturn'].rolling(5).mean()
    df['Vol5'] = df['LogReturn'].rolling(5).std()
    df = df.dropna()
    return df

def train_model(df, model_type='RandomForest'):
    X = df[['Lag1', 'Lag2', 'Lag3', 'MA5', 'Vol5']]
    y = df['LogReturn'].rolling(30).std().shift(-1).dropna()
    X = X.iloc[:len(y)]
    X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)
    model = RandomForestRegressor() if model_type == 'RandomForest' else XGBRegressor()
    model.fit(X_train, y_train)
    preds = model.predict(X_test)
    return model, X_test, y_test, preds

def explain_model(model, X_sample):
    explainer = shap.TreeExplainer(model)
    shap_values = explainer.shap_values(X_sample)
    return shap_values

def detect_regime(df):
    hmm = GaussianHMM(n_components=2, n_iter=1000)
    hmm.fit(df['LogReturn'].values.reshape(-1, 1))
    df['Regime'] = hmm.predict(df['LogReturn'].values.reshape(-1, 1))
    return df

def compute_var(df, confidence=0.99):
    sorted_returns = np.sort(df['LogReturn'].dropna())
    index = int((1 - confidence) * len(sorted_returns))
    return sorted_returns[index]

# --- Streamlit App ---
st.set_page_config(layout="wide")
st.title("ð FX Volatility Monitoring App (ML + VaR + SHAP + Regime)")

ROLL_WINDOW = st.sidebar.selectbox("Rolling Window", [30, 60, 90])
model_choice = st.sidebar.radio("Forecast Model", ["RandomForest", "XGBoost"])

df_all = generate_mock_fx_data()
currency = st.selectbox("Select Currency", sorted(df_all['Currency'].unique()))
df = df_all[df_all['Currency'] == currency].copy()
df = compute_log_returns(df)
df = create_features(df)

# --- Model Training and Prediction ---
model, X_test, y_test, preds = train_model(df, model_choice)

# --- Forecast Chart ---
st.subheader("ð Forecast vs Actual Volatility")
plot_df = df.iloc[-len(X_test):].copy()
plot_df["Forecast"] = preds
plot_df["Actual"] = y_test.values

fig = go.Figure()
fig.add_trace(go.Scatter(x=plot_df['Date'], y=plot_df["Actual"], name="Actual Vol"))
fig.add_trace(go.Scatter(x=plot_df['Date'], y=plot_df["Forecast"], name="Forecast", line=dict(dash="dot")))
st.plotly_chart(fig, use_container_width=True)

# --- SHAP Feature Importance ---
st.subheader("ð§  SHAP Feature Importance")
shap_values = explain_model(model, X_test)
fig2, ax = plt.subplots()
shap.summary_plot(shap_values, X_test, plot_type="bar", show=False)
st.pyplot(fig2)

# --- Regime Detection ---
st.subheader("ð Regime Shift Detection")
df = detect_regime(df)
fig3 = go.Figure()
fig3.add_trace(go.Scatter(x=df['Date'], y=df['FXRate'], name='FX Rate'))
fig3.add_trace(go.Scatter(x=df['Date'], y=df['Regime'] * df['FXRate'].max() * 0.1, name='Regime', mode='markers'))
st.plotly_chart(fig3, use_container_width=True)

# --- Value at Risk ---
st.subheader("ð Value at Risk (VaR)")
var_99 = compute_var(df, 0.99)
st.metric(label="99% 1-day VaR", value=f"{round(var_99*100, 4)}%")

# --- Tabular Summary UI ---
st.subheader("ð Summary Table")
summary_df = pd.DataFrame({
    "Currency": [currency],
    "Rolling Window": [ROLL_WINDOW],
    "Model": [model_choice],
    "MAE": [round(mean_absolute_error(y_test, preds), 6)],
    "RMSE": [round(np.sqrt(mean_squared_error(y_test, preds)), 6)],
    "VaR_99": [round(var_99 * 100, 4)],
    "Regime Detected": [df['Regime'].nunique()]
})
st.table(summary_df)

import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(layout="wide")
st.title("üìä FX Threshold Recalibration & Impact Analysis\n(‚ÄòGroup N‚Äô Label Handling)")

# ----------------------------------------------------------
# SECTION 0: (OPTIONAL) SAMPLE DATA FOR INSTANT TESTING
# ----------------------------------------------------------
# You may remove or comment out this block when using real files.
sample_threshold_csv = """CCY,Group,value
USD,Group 1,0.010
EUR,Group 2,0.020
JPY,Group 2,0.021
INR,Group 3,0.030
"""
sample_trade_csv = """trade_id,currency_pair,deviation_percent,base_curr_group,orig_curr_group,legal_entity,trade_date
1,USD,0.009,1,1,Entity_A,2023-01-15
2,EUR,0.025,2,2,Entity_A,2023-02-20
3,JPY,0.018,2,2,Entity_B,2023-02-28
4,INR,0.028,3,3,Entity_B,2023-03-05
5,USD,0.012,1,2,Entity_A,2023-03-15
6,EUR,0.018,2,3,Entity_B,2023-04-01
"""
st.sidebar.markdown("### (Optional) Copy/Paste these CSV texts to test instantly:")
st.sidebar.text_area("Sample Threshold CSV", sample_threshold_csv, height=150)
st.sidebar.text_area("Sample Trade CSV", sample_trade_csv, height=150)
# ----------------------------------------------------------

st.sidebar.header("üìÅ Upload Your Files")
threshold_file = st.sidebar.file_uploader(
    "Upload Threshold CSV (with columns CCY, Group, value)",
    type="csv"
)
trade_files = st.sidebar.file_uploader(
    "Upload ONE or MORE Trade CSV(s)",
    type="csv",
    accept_multiple_files=True
)

@st.cache_data
def load_csv(fp) -> pd.DataFrame:
    try:
        return pd.read_csv(fp)
    except Exception:
        st.error("‚ùå Could not parse one of the uploaded CSV files. Please check formatting.")
        return pd.DataFrame()

def extract_group_number(df: pd.DataFrame) -> pd.DataFrame:
    """
    Takes the column df['Group'] (which may contain strings like 'Group 1', 'Group 2', etc.)
    and creates a new column df['Group_Num'] with the integer part (1, 2, 3, ...). 
    If any row fails to match digits, that row is dropped.
    """
    df = df.copy()
    # Extract the digits from "Group 1" ‚Üí "1"
    df["Group_Num"] = (
        df["Group"]
        .astype(str)
        .str.extract(r"(\d+)", expand=False)
    )
    # Drop rows where no digits were found
    df = df.dropna(subset=["Group_Num"])
    df["Group_Num"] = df["Group_Num"].astype(int)
    return df

# ----------------------------------------------------------
# SECTION 1: LOAD & VALIDATE THRESHOLD FILE (KEEP "Group" TEXT)
# ----------------------------------------------------------
if threshold_file is None:
    st.warning("üì• Please upload your Threshold CSV (with columns CCY, Group, value).")
    st.stop()

df_threshold = load_csv(threshold_file)
if df_threshold.empty:
    st.error("‚ùå Threshold file could not be loaded. Exiting.")
    st.stop()

# Ensure required columns:
missing_thresh_cols = [c for c in ["CCY","Group","value"] if c not in df_threshold.columns]
if missing_thresh_cols:
    st.error(f"‚ùå Threshold file is missing column(s): {missing_thresh_cols}")
    st.stop()

# Extract numeric part of 'Group'
df_threshold = extract_group_number(df_threshold)
if "Group_Num" not in df_threshold.columns or df_threshold["Group_Num"].isna().all():
    st.error("‚ùå Could not parse any integer from your 'Group' column. Ensure it‚Äôs like 'Group 1', 'Group 2', etc.")
    st.stop()

# Now Safe to convert 'value' to numeric (drop invalids)
df_threshold["value"] = pd.to_numeric(df_threshold["value"], errors="coerce")
df_threshold = df_threshold.dropna(subset=["value"])

# Show a preview (displaying original "Group" text, and numeric Group_Num)
st.markdown("### üßæ Threshold File Preview (Top 5 rows)")
st.dataframe(df_threshold[["CCY","Group","Group_Num","value"]].head())

# ----------------------------------------------------------
# SECTION 2: LOAD & CONCATENATE TRADE FILE(S)
# ----------------------------------------------------------
if not trade_files:
    st.warning("üì• Please upload at least one Trade CSV (columns: trade_id, currency_pair, deviation_percent, base_curr_group, orig_curr_group, legal_entity[, trade_date]).")
    st.stop()

trade_dfs = []
for tfile in trade_files:
    _temp = load_csv(tfile)
    if not _temp.empty:
        trade_dfs.append(_temp)
if not trade_dfs:
    st.error("‚ùå None of the uploaded trade files could be read. Exiting.")
    st.stop()

df_trades = pd.concat(trade_dfs, ignore_index=True)
st.success(f"‚úÖ Loaded {len(trade_dfs)} trade file(s). Combined trade count = {len(df_trades)}")

# ----------------------------------------------------------
# SECTION 3: VALIDATE & CLEAN TRADE DATA
# ----------------------------------------------------------
required_trade_cols = [
    "trade_id", 
    "currency_pair", 
    "deviation_percent", 
    "base_curr_group", 
    "orig_curr_group", 
    "legal_entity"
]
missing_trade_cols = [c for c in required_trade_cols if c not in df_trades.columns]
if missing_trade_cols:
    st.error(f"‚ùå Trade file(s) missing column(s): {missing_trade_cols}")
    st.stop()

# Convert types
df_trades["trade_id"] = pd.to_numeric(df_trades["trade_id"], errors="coerce")
df_trades["deviation_percent"] = pd.to_numeric(df_trades["deviation_percent"], errors="coerce")
df_trades["base_curr_group"] = pd.to_numeric(df_trades["base_curr_group"], errors="coerce")
df_trades["orig_curr_group"] = pd.to_numeric(df_trades["orig_curr_group"], errors="coerce")
df_trades["legal_entity"] = df_trades["legal_entity"].astype(str)

# Drop rows with missing required fields
df_trades = df_trades.dropna(
    subset=[
        "trade_id", 
        "currency_pair", 
        "deviation_percent", 
        "base_curr_group", 
        "orig_curr_group", 
        "legal_entity"
    ]
)
df_trades["trade_id"] = df_trades["trade_id"].astype(int)
df_trades["base_curr_group"] = df_trades["base_curr_group"].astype(int)
df_trades["orig_curr_group"] = df_trades["orig_curr_group"].astype(int)

# Parse 'trade_date' if it exists
has_date = "trade_date" in df_trades.columns
if has_date:
    df_trades["trade_date"] = pd.to_datetime(df_trades["trade_date"], errors="coerce")

# Compute 'max_group' from base & orig
df_trades["max_group"] = df_trades[["base_curr_group","orig_curr_group"]].max(axis=1)

# Preview
st.markdown("### üßæ Trade Data Preview (Top 5 rows)")
st.dataframe(df_trades.head())

# ----------------------------------------------------------
# SECTION 4: ‚ÄúBy Group‚Äù vs. ‚ÄúBy Currency‚Äù TOGGLE
# ----------------------------------------------------------
recal_mode = st.sidebar.radio("üîÑ Recalibration Mode", ["By Group", "By Currency"], index=0)
df_result = pd.DataFrame()  # placeholder

if recal_mode == "By Group":
    st.sidebar.header("üîß Adjust Thresholds by Group (using Group_Num)")

    unique_groups = sorted(df_threshold["Group_Num"].unique())
    adjustments = []
    for g in unique_groups:
        # find the average 'value' for that numeric group
        old_val = float(df_threshold[df_threshold["Group_Num"] == g]["value"].mean())
        new_val = st.sidebar.number_input(
            f"Group {g} Threshold", 
            value=old_val, 
            format="%.5f", 
            key=f"grp_{g}"
        )
        adjustments.append({
            "Group_Num": g,
            "Old Threshold": old_val,
            "New Threshold": new_val,
            "Delta": round(new_val - old_val, 5),
            "Display Label": f"Group {g}"
        })

    df_group_adj = pd.DataFrame(adjustments)
    st.subheader("üîÑ Threshold Change Summary (Group Level)")
    st.dataframe(df_group_adj[["Display Label","Old Threshold","New Threshold","Delta"]])

    # Build lookup from numeric group ‚Üí new_threshold
    lookup = df_group_adj.set_index("Group_Num")["New Threshold"].to_dict()

    # Filter trades whose max_group is in our lookup
    df_grp = df_trades[df_trades["max_group"].isin(lookup.keys())].copy()
    if df_grp.empty:
        st.error("‚ùå No trades fall into any of the recalibrated groups. Check your Group settings.")
        st.stop()

    df_grp["threshold_used"] = df_grp["max_group"].map(lookup)
    df_result = df_grp

else:  # recal_mode == "By Currency"
    st.sidebar.header("üîß Adjust Thresholds by Currency (using CCY)")

    # Check that 'CCY' exists
    if "CCY" not in df_threshold.columns:
        st.error("‚ùå ‚ÄúBy Currency‚Äù mode requires a 'CCY' column in the threshold file.")
        st.stop()

    currency_list = []
    for ccy in sorted(df_threshold["CCY"].unique()):
        old_val = float(df_threshold[df_threshold["CCY"] == ccy]["value"].iloc[0])
        new_val = st.sidebar.number_input(
            f"{ccy} Threshold", 
            value=old_val, 
            format="%.5f", 
            key=f"ccy_{ccy}"
        )
        currency_list.append({
            "CCY": ccy,
            "Old": old_val,
            "New": new_val
        })

    df_currency_adj = pd.DataFrame(currency_list)
    st.subheader("üîÑ Threshold Change Summary (Currency Level)")
    st.dataframe(df_currency_adj)

    # Merge directly: trade.currency_pair ‚Üí threshold.CCY
    df_cur = df_trades.merge(
        df_currency_adj.rename(columns={"CCY":"currency_pair"}),
        on="currency_pair", how="left"
    ).copy()
    if "New" not in df_cur.columns:
        st.error("‚ùå Currency-level merge failed. Check that every trade‚Äôs currency_pair appears in the threshold file‚Äôs CCY column.")
        st.stop()

    df_cur["threshold_used"] = df_cur["New"]
    df_result = df_cur

# ----------------------------------------------------------
# SECTION 5: FLAG ‚Äúis_within_threshold‚Äù AND VALIDATE
# ----------------------------------------------------------
if df_result.empty or "threshold_used" not in df_result.columns:
    st.error("‚ùå Threshold assignment failed. Please verify your inputs and toggle choices.")
    st.stop()

df_result["is_within_threshold"] = df_result["deviation_percent"] <= df_result["threshold_used"]

# ----------------------------------------------------------
# SECTION 6: GROUP-LEVEL IMPACT SUMMARY
# ----------------------------------------------------------
st.subheader("üìä Group-Level Impact Summary")
group_summary = (
    df_result
    .groupby("max_group", observed=True)
    .agg(
        Total_Trades=('trade_id','count'),
        Breaches=('is_within_threshold', lambda x: (~x).sum()),
        Within_Threshold=('is_within_threshold','sum')
    )
    .reset_index()
)
group_summary["Breach %"] = round((group_summary["Breaches"] / group_summary["Total_Trades"]) * 100, 2)
# Keep the ‚ÄúGroup N‚Äù label for display
group_summary["Display Group"] = group_summary["max_group"].apply(lambda x: f"Group {x}")

st.dataframe(group_summary[["Display Group","Total_Trades","Breaches","Within_Threshold","Breach %"]])

fig_bar = px.bar(
    group_summary,
    x="Display Group",
    y="Breach %",
    text="Breach %",
    color="Breach %",
    color_continuous_scale="Reds",
    title="üö¶ Breach % by Group"
)
fig_bar.update_traces(texttemplate="%{text}%", textposition="outside")
st.plotly_chart(fig_bar, use_container_width=True)

# ----------------------------------------------------------
# SECTION 7: TIME-BASED (MONTHLY) IMPACT (IF trade_date EXISTS)
# ----------------------------------------------------------
if "trade_date" in df_result.columns and not df_result["trade_date"].isna().all():
    df_tm = df_result.copy()
    df_tm["trade_date"] = pd.to_datetime(df_tm["trade_date"], errors="coerce")
    df_tm = df_tm.dropna(subset=["trade_date"])
    if not df_tm.empty:
        df_tm["Month"] = df_tm["trade_date"].dt.to_period("M").astype(str)
        monthly = (
            df_tm
            .groupby("Month", observed=True)
            .agg(
                Total_Trades=('trade_id','count'),
                Breaches=('is_within_threshold', lambda x: (~x).sum())
            )
            .reset_index()
        )
        monthly["Breach %"] = round((monthly["Breaches"] / monthly["Total_Trades"]) * 100, 2)

        with st.expander("üìÖ Impact Over Time (Monthly)"):
            st.dataframe(monthly)
            fig_line = px.line(
                monthly,
                x="Month",
                y="Breach %",
                markers=True,
                title="üìà Monthly Breach % Trend"
            )
            st.plotly_chart(fig_line, use_container_width=True)

# ----------------------------------------------------------
# SECTION 8: SAMPLE ‚ÄúCURRENCY-PAIR LEVEL‚Äù DETAIL (FIRST 5 PAIRS)
# ----------------------------------------------------------
st.subheader("üìÇ Currency-Pair Level Detail (Sample)")

all_pairs = df_result["currency_pair"].dropna().unique()
sample_pairs = all_pairs[:5]  # first 5 to avoid UI overload
for pair in sample_pairs:
    with st.expander(f"üîç Pair: {pair} (Top 100 rows)"):
        df_pair = df_result[df_result["currency_pair"] == pair]
        st.markdown(
            f"**Total Trades:** {len(df_pair)}     |   "
            f"**Breaches:** {int((~df_pair['is_within_threshold']).sum())}     |   "
            f"**Compliant:** {int(df_pair['is_within_threshold'].sum())}"
        )
        st.dataframe(
            df_pair[[
                "trade_id",
                "legal_entity",
                "deviation_percent",
                "threshold_used",
                "is_within_threshold"
            ]].head(100)
        )

# ----------------------------------------------------------
# SECTION 9: DOWNLOAD FULL RESULTS
# ----------------------------------------------------------
st.download_button(
    "üì• Download Full Recalibrated Results as CSV",
    df_result.to_csv(index=False),
    "fx_threshold_recalibrated_results.csv"
)
